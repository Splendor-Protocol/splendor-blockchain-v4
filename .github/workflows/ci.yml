name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.19'
  NODE_VERSION: '18'

jobs:
  # Go tests for core blockchain
  test-core:
    name: Test Core Blockchain
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
          
    - name: Install dependencies
      working-directory: ./Core-Blockchain/node_src
      run: |
        go mod download
        go mod tidy
        
    - name: Run tests
      working-directory: ./Core-Blockchain/node_src
      run: |
        go test -v -race -coverprofile=coverage.out ./...
        
    - name: Generate coverage report
      working-directory: ./Core-Blockchain/node_src
      run: |
        go tool cover -html=coverage.out -o coverage.html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./Core-Blockchain/node_src/coverage.out
        flags: core
        name: core-coverage

  # Smart contract tests
  test-contracts:
    name: Test System Contracts
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: './System-Contracts/package-lock.json'
        
    - name: Install dependencies
      working-directory: ./System-Contracts
      run: npm ci
      
    - name: Compile contracts
      working-directory: ./System-Contracts
      run: npx hardhat compile
      
    - name: Run contract tests
      working-directory: ./System-Contracts
      run: npx hardhat test
      
    - name: Generate coverage report
      working-directory: ./System-Contracts
      run: npx hardhat coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./System-Contracts/coverage/lcov.info
        flags: contracts
        name: contracts-coverage

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './Core-Blockchain/node_src/...'
        
    - name: Set up Node.js for contract security
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Slither
      run: |
        pip3 install slither-analyzer
        
    - name: Run Slither on contracts
      working-directory: ./System-Contracts
      run: |
        npm ci
        npx hardhat compile
        slither . --exclude-dependencies

  # Build and test integration
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-core, test-contracts]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Build core blockchain
      working-directory: ./Core-Blockchain/node_src
      run: |
        go mod download
        go build -o geth ./cmd/geth
        
    - name: Initialize test network
      working-directory: ./Core-Blockchain
      run: |
        ./node_src/geth init genesis.json --datadir ./testdata
        
    - name: Run mainnet verification
      run: |
        npm ci
        npm run verify
        
    - name: Test RPC endpoints
      run: |
        # Start node in background
        cd Core-Blockchain
        ./node_src/geth --datadir ./testdata --http --http.api eth,net,web3 --dev &
        sleep 10
        
        # Test basic RPC calls
        curl -X POST -H "Content-Type: application/json" \
          --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' \
          http://localhost:8545

  # Linting and formatting
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        
    - name: Run golangci-lint
      working-directory: ./Core-Blockchain/node_src
      run: |
        $(go env GOPATH)/bin/golangci-lint run
        
    - name: Check Go formatting
      working-directory: ./Core-Blockchain/node_src
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Go code is not formatted properly:"
          gofmt -s -l .
          exit 1
        fi
        
    - name: Set up Node.js for contract linting
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Lint Solidity contracts
      working-directory: ./System-Contracts
      run: |
        npm ci
        npx solhint 'contracts/**/*.sol'

  # Documentation check
  docs-check:
    name: Documentation Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check for broken links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'yes'
        config-file: '.github/mlc_config.json'

  # Build Docker images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-core, test-contracts, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push core node image
      uses: docker/build-push-action@v5
      with:
        context: ./Core-Blockchain/node_src
        file: ./Core-Blockchain/node_src/Dockerfile
        push: true
        tags: |
          splendor/core-node:latest
          splendor/core-node:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Deploy to testnet
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [integration-test, build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: testnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to testnet
      run: |
        echo "Deploying to testnet..."
        # Add testnet deployment scripts here
        
    - name: Run smoke tests
      run: |
        echo "Running smoke tests on testnet..."
        # Add smoke test scripts here

  # Deploy to mainnet
  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [integration-test, build-docker]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: mainnet
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to mainnet
      run: |
        echo "Deploying to mainnet..."
        # Add mainnet deployment scripts here
        
    - name: Create deployment notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  # Performance benchmarks
  benchmark:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run benchmarks
      working-directory: ./Core-Blockchain/node_src
      run: |
        go test -bench=. -benchmem ./... > benchmark.txt
        
    - name: Comment benchmark results
      uses: benchmark-action/github-action-benchmark@v1
      with:
        tool: 'go'
        output-file-path: ./Core-Blockchain/node_src/benchmark.txt
        comment-on-alert: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
